{
    path:"/"sv -1_"/"vs ssr[;"\\";"/"]first -3#value .z.s;
    system"l ",path,"/intcode.q";
    }[];

d19p1:{a:"J"$","vs x;
    r:intcode[a;]each raze {x,\:/:x}til 50;
    -1 " #"grid:50 cut raze r;
    sum sum grid};

d19p2:{[sqsz;x]
    a:"J"$","vs x;
    size:10;
    grid:size cut raze intcode[a;]each raze {x,\:/:x}til size;
    minx:first where last grid;
    maxx:last where last grid;
    minPos:(minx;size-1);
    maxPos:(maxx;size-1);
    run:1b;
    maxxs:((sqsz-1)#0), maxx;
    while[run;
        minPos+:0 1;
        r:last intcode[a;minPos];
        while[not r; minPos+:1 0;r:last intcode[a;minPos]];
        maxPos+:0 1;
        r:last intcode[a;maxPos];
        while[not r; maxPos+:1 0;r:last intcode[a;maxPos]];
        while[r; maxPos+:1 0;r:last intcode[a;maxPos]];
        maxPos-:1 0;
        maxxs:1_maxxs,first maxPos;
        maxsq:1+first[maxxs]-first[minPos];
        show maxsq;
        if[maxsq>=sqsz; found:(minPos[0];minPos[1]-sqsz-1); run:0b];
    ];
    sum found*10000 1};

d19p1whitebox:{
    a:"J"$","vs x;
    dx:first a[81 82]except 0 1;
    dy:first a[123 124]except 0 1;
    dz:first a[161 162]except 0 1;
    cy:til 50;
    minx:ceiling((neg[cy*dz])+sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*dx;
    maxx:floor((neg[cy*dz])-sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*neg dx;
    sum 0|1+maxx-minx};

d19p2whitebox:{[sqsz;x]
    a:"J"$","vs x;
    dx:first a[81 82]except 0 1;
    dy:first a[123 124]except 0 1;
    dz:first a[161 162]except 0 1;
    cc:sqsz;
    maxx:enlist 0;minx:enlist 0;
    while[sqsz>last[maxx]-last[minx];
        cc*:2;
        cyl:(sqsz-1)+til[cc];
        cyr:til cc;
        minx:ceiling((neg[cyl*dz])+sqrt[(cyl*dz*cyl*dz)+4*dx*cyl*cyl*dy])%2*dx;
        maxx:floor((neg[cyr*dz])-sqrt[(cyr*dz*cyr*dz)+4*dx*cyr*cyr*dy])%2*neg dx;
    ];
    ry:first where (sqsz-1)<=maxx-minx;
    rx:minx ry;
    ry+10000*rx};

//d19p1"109,424,203,1,21102,1,11,0,1105,1,282,21102,1,18,0,1105,1,259,2102,1,1,221,203,1,21101,31,0,0,1105,1,282,21101,38,0,0,1105,1,259,20102,1,23,2,21201,1,0,3,21102,1,1,1,21101,57,0,0,1106,0,303,2101,0,1,222,20101,0,221,3,21001,221,0,2,21101,259,0,1,21101,80,0,0,1106,0,225,21102,1,97,2,21102,1,91,0,1105,1,303,1201,1,0,223,20102,1,222,4,21101,259,0,3,21101,225,0,2,21102,1,225,1,21102,1,118,0,1106,0,225,21001,222,0,3,21102,1,21,2,21102,133,1,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,0,148,0,1105,1,259,1201,1,0,223,20101,0,221,4,21001,222,0,3,21101,14,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,109,20207,1,223,2,20102,1,23,1,21102,-1,1,3,21101,0,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,21201,-3,0,1,21202,-2,1,2,21201,-1,0,3,21101,0,250,0,1106,0,225,22101,0,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21202,-2,1,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21101,0,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0"
//d19p2[100;"109,424,203,1,21102,1,11,0,1105,1,282,21102,1,18,0,1105,1,259,2102,1,1,221,203,1,21101,31,0,0,1105,1,282,21101,38,0,0,1105,1,259,20102,1,23,2,21201,1,0,3,21102,1,1,1,21101,57,0,0,1106,0,303,2101,0,1,222,20101,0,221,3,21001,221,0,2,21101,259,0,1,21101,80,0,0,1106,0,225,21102,1,97,2,21102,1,91,0,1105,1,303,1201,1,0,223,20102,1,222,4,21101,259,0,3,21101,225,0,2,21102,1,225,1,21102,1,118,0,1106,0,225,21001,222,0,3,21102,1,21,2,21102,133,1,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,0,148,0,1105,1,259,1201,1,0,223,20101,0,221,4,21001,222,0,3,21101,14,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,109,20207,1,223,2,20102,1,23,1,21102,-1,1,3,21101,0,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,21201,-3,0,1,21202,-2,1,2,21201,-1,0,3,21101,0,250,0,1106,0,225,22101,0,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21202,-2,1,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21101,0,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0"]

//d19p1compare:{distinct (d19p1 x;d19p1whitebox x)};
//d19p2compare:{distinct (d19p2[100;x];d19p2whitebox[100;x])};
//d19p2compare x:"109,424,203,1,21102,1,11,0,1105,1,282,21102,1,18,0,1105,1,259,2102,1,1,221,203,1,21101,31,0,0,1105,1,282,21101,38,0,0,1105,1,259,20102,1,23,2,21201,1,0,3,21102,1,1,1,21101,57,0,0,1106,0,303,2101,0,1,222,20101,0,221,3,21001,221,0,2,21101,259,0,1,21101,80,0,0,1106,0,225,21102,1,97,2,21102,1,91,0,1105,1,303,1201,1,0,223,20102,1,222,4,21101,259,0,3,21101,225,0,2,21102,1,225,1,21102,1,118,0,1106,0,225,21001,222,0,3,21102,1,21,2,21102,133,1,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,0,148,0,1105,1,259,1201,1,0,223,20101,0,221,4,21001,222,0,3,21101,14,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,109,20207,1,223,2,20102,1,23,1,21102,-1,1,3,21101,0,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,21201,-3,0,1,21202,-2,1,2,21201,-1,0,3,21101,0,250,0,1106,0,225,22101,0,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21202,-2,1,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21101,0,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0"
//d19p2compare x:"109,424,203,1,21101,0,11,0,1106,0,282,21102,1,18,0,1106,0,259,2101,0,1,221,203,1,21101,0,31,0,1106,0,282,21101,0,38,0,1106,0,259,21001,23,0,2,21202,1,1,3,21102,1,1,1,21102,1,57,0,1106,0,303,2102,1,1,222,20102,1,221,3,21001,221,0,2,21102,1,259,1,21102,80,1,0,1106,0,225,21102,106,1,2,21102,91,1,0,1105,1,303,1201,1,0,223,21001,222,0,4,21101,259,0,3,21102,1,225,2,21101,225,0,1,21101,0,118,0,1106,0,225,20101,0,222,3,21102,42,1,2,21101,133,0,0,1105,1,303,21202,1,-1,1,22001,223,1,1,21101,0,148,0,1106,0,259,1201,1,0,223,21001,221,0,4,20101,0,222,3,21101,10,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,106,0,108,20207,1,223,2,20102,1,23,1,21101,-1,0,3,21101,214,0,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,1202,-4,1,249,22102,1,-3,1,22101,0,-2,2,21202,-1,1,3,21101,250,0,0,1105,1,225,21202,1,1,-4,109,-5,2106,0,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,22102,1,-2,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,21202,-2,1,3,21101,343,0,0,1106,0,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,384,1,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,22102,1,1,-4,109,-5,2105,1,0"
//d19p2compare x:"109,424,203,1,21102,1,11,0,1106,0,282,21101,18,0,0,1105,1,259,1201,1,0,221,203,1,21102,1,31,0,1105,1,282,21102,38,1,0,1106,0,259,20102,1,23,2,21201,1,0,3,21101,1,0,1,21101,0,57,0,1106,0,303,1202,1,1,222,20101,0,221,3,21001,221,0,2,21101,259,0,1,21102,80,1,0,1106,0,225,21102,1,145,2,21101,91,0,0,1105,1,303,2101,0,1,223,20101,0,222,4,21102,1,259,3,21101,0,225,2,21101,0,225,1,21102,1,118,0,1105,1,225,21001,222,0,3,21101,80,0,2,21101,133,0,0,1105,1,303,21202,1,-1,1,22001,223,1,1,21101,148,0,0,1106,0,259,1201,1,0,223,20102,1,221,4,20101,0,222,3,21101,0,23,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21102,1,195,0,106,0,109,20207,1,223,2,21001,23,0,1,21102,1,-1,3,21102,1,214,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,22101,0,-3,1,22102,1,-2,2,21201,-1,0,3,21101,0,250,0,1105,1,225,21202,1,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,22101,0,-2,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,21202,-2,1,3,21102,1,343,0,1106,0,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,384,1,0,1105,1,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0"
//d19p2compare x:"109,424,203,1,21101,11,0,0,1105,1,282,21102,18,1,0,1106,0,259,1201,1,0,221,203,1,21102,1,31,0,1105,1,282,21101,38,0,0,1106,0,259,20102,1,23,2,21201,1,0,3,21101,1,0,1,21102,57,1,0,1105,1,303,1201,1,0,222,21001,221,0,3,20101,0,221,2,21102,1,259,1,21101,0,80,0,1105,1,225,21101,76,0,2,21102,1,91,0,1106,0,303,2102,1,1,223,21002,222,1,4,21102,1,259,3,21101,0,225,2,21102,225,1,1,21102,1,118,0,1105,1,225,21001,222,0,3,21102,1,54,2,21102,1,133,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21101,148,0,0,1106,0,259,1202,1,1,223,21001,221,0,4,20101,0,222,3,21101,14,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,0,195,0,106,0,108,20207,1,223,2,20101,0,23,1,21101,0,-1,3,21102,1,214,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,1202,-4,1,249,22102,1,-3,1,21201,-2,0,2,21202,-1,1,3,21101,0,250,0,1106,0,225,22101,0,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2105,1,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22101,0,-2,3,21102,1,343,0,1106,0,303,1106,0,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22102,1,-4,1,21101,0,384,0,1105,1,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2106,0,0"
//d19p2compare x:"109,424,203,1,21101,0,11,0,1106,0,282,21102,18,1,0,1105,1,259,1202,1,1,221,203,1,21102,31,1,0,1106,0,282,21101,0,38,0,1106,0,259,20101,0,23,2,21201,1,0,3,21101,0,1,1,21101,57,0,0,1105,1,303,1202,1,1,222,21001,221,0,3,21001,221,0,2,21101,0,259,1,21101,80,0,0,1105,1,225,21101,119,0,2,21102,1,91,0,1106,0,303,2101,0,1,223,20102,1,222,4,21102,1,259,3,21101,0,225,2,21101,0,225,1,21101,0,118,0,1105,1,225,21002,222,1,3,21101,97,0,2,21101,133,0,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21102,148,1,0,1105,1,259,1201,1,0,223,20101,0,221,4,20102,1,222,3,21101,21,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21102,1,195,0,106,0,109,20207,1,223,2,20101,0,23,1,21101,-1,0,3,21101,0,214,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2102,1,-4,249,21202,-3,1,1,22101,0,-2,2,21201,-1,0,3,21102,1,250,0,1106,0,225,21201,1,0,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,22101,0,-2,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,21202,-2,1,3,21101,0,343,0,1106,0,303,1106,0,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21102,384,1,0,1106,0,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,22102,1,1,-4,109,-5,2106,0,0"

/
OVERVIEW:

PART 1: We run the program with all coordinates from 0 0 to 49 49 and sum the results.

PART 2:
We rely on the fact that on each line the beam covers a single unbroken section of
spaces. We take a small sample (5*5 because some rows had no beam space at all at the
very beginning) and find the minimum and maximum beam space. Then moving on to the
next row, we increment the minimum X coordinate until we move into a beam space (which may
mean no movement at all). Then we increment the maximum X coordinate until we hit
a beam space, then increment again until we hit a non-beam space. The first one is
needed because near the top we might "fall off" the start of the beam. Finally we
step back once and add the right edge to a rotating buffer with the same size as
the square we are searching for. We don't similarly record the left edge, but after
each row we check if the current left edge can be used as the bottom left corner of the
square. To do this we simply look at the first item in the rotating buffer, which
reveals the top right corner. If this is within the square, we return the top left
corner.

WHITEBOXING:
The program calculates the following to decide whether a coordinate is a beam tile:
    1-(cx*cy*dz)<abs[(cy*cy*dy)-cx*cx*dx]
Where cx and cy are the X and Y coordinate inputs, and dx, dy and dz are constants
that change between inputs.

We can rearrange this to eliminate the absolute value and get two simultaneous
inequalities instead:
    ((cx*cy*dz)>=(cy*cy*dy)-cx*cx*dx)and
    (cx*cy*dz)>=(cx*cx*dx)-cy*cy*dy

Given a fixed cy, the first inequality puts a lower bound on cx and the second inequality
puts an upper bound on it. Notice that these are quadratic inequalities both in cx and cy.
We can use the solution formula to get a closed form to calculate both bounds for cx:

minx0:{[dx;dy;dz;cy]ceiling((neg[cy*dz])+sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*dx};
maxx0:{[dx;dy;dz;cy]floor((neg[cy*dz])-sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*neg dx};

This is very advantageous because we can use these as vector formulas to calculate the
bounds for a large number of cy values at the same time. This makes both parts very trivial.

Part 1:
We extract the constants from the code:
q)dx:first a[81 82]except 0 1;
q)dy:first a[123 124]except 0 1;
q)dz:first a[161 162]except 0 1;
q)(dx;dy;dz)
97 21 14

We make a list of y coordinates:
q)cy:til 50;
q)cy
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22..

We find the lower and upper bounds for x using the formulas:
q)minx:ceiling((neg[cy*dz])+sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*dx;
q)minx
0 1 1 2 2 2 3 3 4 4 4 5 5 6 6 6 7 7 8 8 8 9 9 10 10..
q)maxx:floor((neg[cy*dz])-sqrt[(cy*dz*cy*dz)+4*dx*cy*cy*dy])%2*neg dx;
q)maxx
0 0 1 1 2 2 3 3 4 4 5 5 6 7 7 8 8 9 9 10 10 ..  

The number of beam tiles is the difference between the two lists plus one for each row.
q)1+maxx-minx
1 0 1 0 1 1 1 1 1 1 2 1 2 2 2 3 2 3 2 3 3 3 3..
q)sum 1+maxx-minx
181

Part 2:
We can use the formulas above to generate lots of minimum and maximum x coordinates.
I added a while loop to ensure there is no bound to the amount of numbers generated.

Given the amount of numers to generate as cc:
We generate the left bounds of the intervals (square size-1) ahead.
cyl:(sqsz-1)+til[cc];
And the right bounds starting from row 0.
cyr:til cc;
minx:ceiling((neg[cyl*dz])+sqrt[(cyl*dz*cyl*dz)+4*dx*cyl*cyl*dy])%2*dx;
maxx:floor((neg[cyr*dz])-sqrt[(cyr*dz*cyr*dz)+4*dx*cyr*cyr*dy])%2*neg dx;

Once we have enough numbers the coordinates can be found by checking the difference
between the right and left bounds (plus 1 for each row) and finding where the sqare
size first appears.
ry:first where (sqsz-1)<=maxx-minx;
rx:minx ry;
ry+10000*rx
